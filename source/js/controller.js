'use strict';

//todo –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º core-js –∏ regenerator
import 'core-js/stable';
import 'regenerator-runtime/runtime.js';
// import '../../node_modules/lodash.clonedeep/index';
// import * as _ from 'lodash';

//* –º–æ–∏ –∏–º–ø–æ—Ä—Ç—ã
import * as model from './model.js';
import CardsView from './Views/CardsView.js';
import CountryView from './Views/CountryView.js';
import SearchView from './Views/SearchView.js';
import FilterView from './Views/FilterView.js';

import filterToggle from './filter.js';
import switchModeSimple from './switchModeSimple.js';
import scrollToTop from './scrollToTop.js';

//=====================================================
// –±–ª–æ–∫ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?

//* –ø—Ä–æ–≤–µ—Ä—è–µ–º , –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è
const bodyId = document.querySelector('body').id;

switch (bodyId) {
	case 'index':
		initIndexHTML();
		break;
	case 'country':
		initCountryHTML();
		break;

	default:
		break;
}

//=====================================================
// –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π

//todo —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
async function renderAllCountriesCards() {
	const allCountries = await model.getData();
	model.state.allCountries = allCountries;
	model.state.currentData = allCountries;

	history.pushState(null, null, '/');

	CardsView.render(model.state.allCountries);
}

//todo –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω
async function controlSearchCountries(query = null) {
	try {
		FilterView.btnRemoveClasses();

		//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
		CardsView.renderSpinner();

		//* 1 - –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
		// const query = SearchView.getQuery();

		//* 2 - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ state
		model.state.search.query = query;

		//* 2a - –µ—Å–ª–∏ –Ω–µ—Ç query (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) - —á–∏—Å—Ç–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		if (!query) {
			CardsView.clearCardsHeader();
		}

		//* 2–± - –º–µ–Ω—è–µ–º url
		history.pushState(null, null, `/?search=${query}`);

		//* 3 —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await model.getData(query);

		//* 3a - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
		if (data.length === 0)
			CardsView.renderError(
				`Sorry, no country was found on your query <span>${query}</span>üòû Try search for something else!`
			);

		//* 4 - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—â–∞–µ–º –≤ state
		model.state.search.results = data;

		model.state.currentData = data;
		model.state.filter.results = data;

		//* 5 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		CardsView.render(model.state.search.results);

		//* 6 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		CardsView.renderMessage(model.state.search.query);
	} catch (err) {
		console.warn(`üí£üí£üí£ ${err.message} ${err.status}`);

		if (err.message.includes('404')) {
			CardsView.renderError(
				`Sorry, no country was found on your query <span>${model.state.search.query}</span>üòû Try search for something else!`
			);

			CardsView.clear();
		}
	}
}

//todo —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
async function controlFilterRegion(region) {
	// CardsView.clearCardsHeader();

	//* –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–≥–∏–æ–Ω
	/* if (region === 'all') {
		//* —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ä—ã–π )
		//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
		// CardsView.renderSpinner();

		// //* –µ—Å–ª–∏ –±—ã–ª –ø–æ–∏—Å–∫ - —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ–∏—Å–∫, –∏–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
		// if (model.state.search.results.length > 0) {
		// 	//* 3 - —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∏—Å–∫—É
		// 	CardsView.render(model.state.search.results);

		// 	//* 4 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ query –µ—Å—Ç—å
		// 	model.state.search.query &&
		// 		CardsView.renderMessage(model.state.search.query);
		// } else {
		// 	await renderAllCountriesCards();
		// }

		model.state.filter.results.length > 0
			? CardsView.render(model.state.filter.results)
			: CardsView.render(model.state.currentData);

		return;
	} */

	//todo –º–µ–Ω—è–µ–º url
	// history.pushState(null, null, `/?region=${region}`);
	model.updateURL('filter-region', region);

	//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
	CardsView.renderSpinner();

	//* 1 - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º region –∏ data –≤ state

	//* –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	model.state.filter.region = region;

	//* –æ–±–Ω–æ–≤–ª—è–µ–º model.state.filter.results
	await updateFilteredResults(model.state.currentData);

	//* 2 - –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä—É, —Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—à–∏–±–∫—É
	//* –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	if (model.state.filter.results.length === 0) {
		CardsView.renderError(
			`Sorry, no country was found on filter input <span>${model.state.filter.region}</span>üòû Try other filters!`
		);

		CardsView.clear();

		return;
	}

	//* 3 - —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ
	CardsView.render(model.state.filter.results);

	//* 4 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ query –µ—Å—Ç—å
	model.state.search.query && CardsView.renderMessage(model.state.search.query);
}

//todo —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
async function controlSort(name, sort) {
	//todo –º–µ–Ω—è–µ–º url
	model.updateURL('sort', [name, sort]);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º state.sort
	await updateSortState(name, sort);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º state.filter.results
	await updateFilteredResults(model.state.currentData);

	//* –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	CardsView.render(model.state.filter.results);
}

//todo —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
async function controlFilterPopulation(min, max) {
	//todo –º–µ–Ω—è–µ–º url
	model.updateURL('filter-population', [min, max]);

	//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
	CardsView.renderSpinner();

	//* –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	model.state.filter.byPopulation.min = min;
	model.state.filter.byPopulation.max = max;

	//* 1 - –º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state.filter.results

	//* –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	await updateFilteredResults(model.state.currentData);

	//* 2 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	CardsView.render(model.state.filter.results);
}

//todo –æ–±–Ω–æ–≤–ª—è–µ–º filtereResults
async function updateFilteredResults(countries) {
	//* –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ 'none'
	const res = await whereSortIsNotNone();
	const [name, sort] = res;

	const data = countries
		.filter((country) => {
			return model.state.filter.region === 'all'
				? country
				: country.region === model.state.filter.region;
		})
		.filter((country) => {
			return (
				//* –≤ —Ç—ã—Å. —á–µ–ª.
				country.population >= model.state.filter.byPopulation.min * 1000 &&
				country.population <= model.state.filter.byPopulation.max * 1000
			);
		});

	if (name && sort) {
		switch (sort) {
			case 'down':
				data.sort((a, b) => {
					return name === 'population'
						? +b[name] - +a[name]
						: b[name].localeCompare(a[name]);
				});
				break;

			case 'up':
				data.sort((a, b) => {
					return name === 'population'
						? +a[name] - +b[name]
						: a[name].localeCompare(b[name]);
				});
				break;

			default:
				break;
		}
	}

	model.state.filter.results = data;
}

//todo –æ–±–Ω–æ–≤–ª—è–µ–º sortState
async function updateSortState(name, sort) {
	const newSort = {
		population: 'none', // string - 'up' / 'down' , default = none
		countryName: 'none', // string - 'up' / 'down' /  , default = none
		capitalName: 'none', // string - 'up' / 'down' , default = none
	};

	newSort[name] = sort;

	model.state.sort = newSort;
}

function whereSortIsNotNone() {
	//* –∫–ª–æ–Ω–∏—Ä—É–µ–º model.state.sort —á–µ—Ä–µ–∑ lodash cloneDeep
	const cloneStateSort = Object.assign({}, model.state.sort);

	let name = null;
	let sort = null;

	//* –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–ª–æ–Ω—É , –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–≤–Ω–æ none - —Ç–æ –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º name –∏ sort
	for (const [key, value] of Object.entries(cloneStateSort)) {
		if (value !== 'none') {
			name = key;
			sort = value;
			break;
		}
	}

	const result = [name, sort];

	//* –≤–æ–∑–≤—Ä–∞—â–∞–µ–º name –∏ sort
	return result;
}

//todo –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å SearchParams
async function loadResultsOnSearchParams() {
	const curSearchParams = model.getUrlSearchParams();

	//* –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –æ–±—ä–µ–∫—Ç—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	for (const [key, value] of curSearchParams) {
		if (value !== '' && value !== null && value !== undefined) {
			switch (key) {
				// –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫ - –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
				case 'search':
					controlSearchCountries(value);

					break;
				// –µ—Å–ª–∏ –µ—Å—Ç—å region - –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω
				case 'region':
					controlFilterRegion(value);
					break;
				// –µ—Å–ª–∏ –µ—Å—Ç—å population / name / capital - –≤—ã–∑—ã–≤–∞–µ–º sort
				case 'population':
				case 'name':
				case 'capital':
					controlSort(key, value);
					break;

				// –µ—Å–ª–∏ –µ—Å—Ç—å min / max
				case 'min':
					const maxValue = curSearchParams.max;

					controlFilterPopulation(value, maxValue);
					break;
				// –µ—Å–ª–∏ –µ—Å—Ç—å min / max
				case 'max':
					const minValue = curSearchParams.min;

					controlFilterPopulation(minValue, value);
					break;
				case 'id':
					updateStateCountry(id);
					await controlCountryWrapper();
					break;

				default:
					break;
			}
		}
	}
}

//todo –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
function controlChooseCountry(id, border = false, back = false) {
	//! —É–±—Ä–∞–ª –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ back –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–∑–∞–ª–∞ –Ω–∞ index.html
	//* –µ—Å–ª–∏ border true —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π id
	// if (border) model.state.prevId = model.state.country.id;

	//* —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π state –≤ LS
	/* model.state.prevId
		? model.savePrevState(model.state, model.state.prevId)
		: model.savePrevState(model.state); */

	// model.savePrevState(model.state);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º state.country
	updateStateCountry(id);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º LS
	model.updateLS(model.state);

	//* –ø—Ä–æ–≤–µ—Ä—è–µ–º model.state
}

//* –æ–±–Ω–æ–≤–ª—è–µ–º state.country
async function updateStateCountry(id, data = null, dataBorders = null) {
	if (id) {
		model.state.country.id = id;
	}

	if (data) {
		model.state.country.countryHTMLFullInfo = data;
	}

	if (dataBorders) {
		model.state.country.borderCountries = dataBorders;
	}
}

//=====================================================
// –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è country html
async function controlCountryWrapper() {
	try {
		//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
		CountryView.renderSpinner();

		//* –º–µ–Ω—è–µ–º url
		/* history.pushState(
			null,
			null,
			`/country.html/id=${model.state.country.id.toLowerCase()}`
		); */
		//* –º–µ–Ω—è–µ–º url –Ω–æ–≤—ã–π
		model.updateURL('country-id', model.state.country.id.toLowerCase());

		//* 1 - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ
		/* const data = await model.getData(null, model.state.country.id); */
		const data = await model.getData(
			null,
			model.state.country.id.toLowerCase()
		);

		model.state.country.countryHTMLFullInfo = data;
		// await updateStateCountry(model.state.country.id, data);

		// let bordersNewData = [];

		//! —Ä–∞–±–æ—Ç–∞–µ—Ç

		//* 2 - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å–µ–¥—è—Ö
		const borders = await model.getDataBorders(
			model.state.country.countryHTMLFullInfo.borders
		);

		//* 3 –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ state
		model.state.country.borderCountries = borders;

		//* 4 —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		CountryView.render(
			model.state.country.countryHTMLFullInfo,
			model.state.country.borderCountries
		);
	} catch (error) {
		console.error(`${error}`);
		CountryView.renderMessage(
			`Could not load data of country with code (${model.state.country.id})üòû Try again later`
		);
	}
}

//todo –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
async function controlBtnBack() {
	// const prevState = localStorage.getItem('country-prev-state')

	//* –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥ state
	const prevState = model.getPrevState(model.state.prevId);

	//* –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π state
	model.setPrevState(prevState);

	controlChooseCountry(model.state.prevId);

	window.history.back();
}

//=====================================================
// –±–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

//* –Ω–∞—á–∞–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ index
async function initIndexHTML() {
	filterToggle();
	switchModeSimple();
	scrollToTop();

	//* 0 - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
	CardsView.renderSpinner();

	//* 1 - –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
	await renderAllCountriesCards();

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –ø–æ–∏—Å–∫—É
	SearchView.addHandlerSearch(controlSearchCountries);

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–µ–≥–∏–æ–Ω–∞
	FilterView.addHandlerFilterRegion(controlFilterRegion);

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
	FilterView.addHandlerSort(controlSort);

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –º–µ–∂–¥—É –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
	FilterView.addHandlerFilterPopulation(controlFilterPopulation);

	//todo handle –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—Ä–∞–Ω—ã
	CardsView.addHandlerChooseCountry(controlChooseCountry);
}

//* –Ω–∞—á–∞–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ country
async function initCountryHTML() {
	switchModeSimple();
	scrollToTop();

	//todo
	await controlCountryWrapper();

	//todo —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –¥—Ä—É–≥–∏–º —Å—Ç—Ä–∞–Ω–∞–º
	CountryView.addHandlerToBorderCountry(controlChooseCountry);
}
