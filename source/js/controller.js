'use strict';

//todo –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º core-js –∏ regenerator
import 'core-js/stable';
import 'regenerator-runtime/runtime.js';
// import '../../node_modules/lodash.clonedeep/index';
// import * as _ from 'lodash';

//* –º–æ–∏ –∏–º–ø–æ—Ä—Ç—ã
import * as model from './model.js';
import CardsView from './Views/CardsView.js';
// console.log('CardsView: ', CardsView);
import CountryView from './Views/CountryView.js';
import SearchView from './Views/SearchView.js';
import FilterView from './Views/FilterView.js';

//! —Ç–µ—Å—Ç Promise.all
import * as PromisAllTest from './Promise-all-test.js';

// PromisAllTest.resString();

/* console.log('CardsView: ', CardsView);
console.log('CountryView: ', CountryView); */

import filterToggle from './filter.js';
import switchModeSimple from './switchModeSimple.js';
import scrollToTop from './scrollToTop.js';

//=====================================================
// –±–ª–æ–∫ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?

//* –ø—Ä–æ–≤–µ—Ä—è–µ–º , –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è
const bodyId = document.querySelector('body').id;
// console.log('bodyId: ', bodyId);

switch (bodyId) {
	case 'index':
		initIndexHTML();
		break;
	case 'country':
		initCountryHTML();
		break;

	default:
		break;
}

//=====================================================
// –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π

//todo —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
async function renderAllCountriesCards() {
	console.log('model.state: ', model.state);

	//* –µ—Å–ª–∏ –Ω–µ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∏–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å
	/* if (model.state.allCountries.length === 0) {
		const allCountries = await model.getData();
		model.state.allCountries = allCountries;
		model.state.currentData = allCountries;
		// model.state.filter.results = allCountries;
	} else {
		model.state.currentData = allCountries;
	} */
	const allCountries = await model.getData();
	model.state.allCountries = allCountries;
	model.state.currentData = allCountries;

	console.log('model.state: ', model.state);

	history.pushState(null, null, '/');

	CardsView.render(model.state.allCountries);
}
//todo 2 –≤–∞—Ä - —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
/* async function renderCountriesCards(all = true) {
	if (all) {
		const allCountries = await model.getData();
		model.state.allCountries = allCountries;
		console.log('model.state: ', model.state);

		CardsView.render(model.state.allCountries);
	} else {
		CardsView.render(model.state.search.results);
	}
} */

//todo —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—Ä–∞–Ω –ø–æ –ø–æ–∏—Å–∫—É
/* async function renderCountriesCards() {
	// CardsView.renderSpinner();
	SearchView.addHandlerSearch(model.searchCountriesOnQuery);
	CardsView.render(model.state.search.results);
} */

//todo –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω
async function controlSearchCountries() {
	try {
		console.log('controlSearchCountries-1 model.state: ', model.state);

		FilterView.btnRemoveClasses();

		//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
		CardsView.renderSpinner();

		//* 1 - –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
		const query = SearchView.getQuery();

		//* 2 - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ state
		model.state.search.query = query;

		//* 2a - –µ—Å–ª–∏ –Ω–µ—Ç query (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) - —á–∏—Å—Ç–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		if (!query) {
			CardsView.clearCardsHeader();

			/* CardsView.render(model.state.allCountries);
			return; */
		}

		//* 2–± - –º–µ–Ω—è–µ–º url
		history.pushState(null, null, `/?search=${query}`);

		//* 3 —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await model.getData(query);
		console.log('data: ', data);

		//* 3a - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
		if (data.length === 0)
			CardsView.renderError(
				`Sorry, no country was found on your query <span>${query}</span>üòû Try search for something else!`
			);

		//* 4 - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—â–∞–µ–º –≤ state
		model.state.search.results = data;

		model.state.currentData = data;
		model.state.filter.results = data;

		//* 5 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		CardsView.render(model.state.search.results);

		//* 6 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		CardsView.renderMessage(model.state.search.query);

		console.log('controlSearchCountries-2 model.state: ', model.state);
	} catch (err) {
		console.warn(`üí£üí£üí£ ${err.message} ${err.status}`);

		if (err.message.includes('404')) {
			CardsView.renderError(
				`Sorry, no country was found on your query <span>${model.state.search.query}</span>üòû Try search for something else!`
			);

			CardsView.clear();
		}
	}
}

//todo —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
async function controlFilterRegion(region) {
	console.log('controlFilterRegion-1 model.state: ', model.state);

	// CardsView.clearCardsHeader();

	//* –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–≥–∏–æ–Ω
	/* if (region === 'all') {
		//* —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ä—ã–π )
		//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
		// CardsView.renderSpinner();

		// //* –µ—Å–ª–∏ –±—ã–ª –ø–æ–∏—Å–∫ - —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ–∏—Å–∫, –∏–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
		// if (model.state.search.results.length > 0) {
		// 	//* 3 - —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∏—Å–∫—É
		// 	CardsView.render(model.state.search.results);

		// 	//* 4 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ query –µ—Å—Ç—å
		// 	model.state.search.query &&
		// 		CardsView.renderMessage(model.state.search.query);
		// } else {
		// 	await renderAllCountriesCards();
		// }

		model.state.filter.results.length > 0
			? CardsView.render(model.state.filter.results)
			: CardsView.render(model.state.currentData);

		return;
	} */

	//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
	CardsView.renderSpinner();

	//* 1 - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º region –∏ data –≤ state

	//* —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	/* const data =
		model.state.filter.results.length > 0
			? model.state.filter.results.filter(
					(country) => country.region === region
			  )
			: model.state.currentData.filter((country) => country.region === region);

	console.log('data: ', data); */

	/* model.state.filter.region = region;
	model.state.filter.results = data; */

	//* –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	model.state.filter.region = region;

	//* –æ–±–Ω–æ–≤–ª—è–µ–º model.state.filter.results
	await updateFilteredResults(model.state.currentData);

	//* 2 - –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä—É, —Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—à–∏–±–∫—É
	//* —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	/* if (data.length === 0) {
		CardsView.renderError(
			`Sorry, no country was found on filter input <span>${model.state.filter.region}</span>üòû Try other filters!`
		);

		CardsView.clear();

		return;
	} */
	//* –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	if (model.state.filter.results.length === 0) {
		CardsView.renderError(
			`Sorry, no country was found on filter input <span>${model.state.filter.region}</span>üòû Try other filters!`
		);

		CardsView.clear();

		return;
	}

	//* 3 - —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ
	CardsView.render(model.state.filter.results);

	//* 4 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ query –µ—Å—Ç—å
	model.state.search.query && CardsView.renderMessage(model.state.search.query);

	console.log('controlFilterRegion-2 model.state: ', model.state);
}

//todo —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
async function controlSort(name, sort) {
	// model.state.filter.results = model.state.filter.results.sort(a[name] - )
	console.log({ name, sort });
	console.log('controlSort-1 - model.state: ', model.state);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º state.sort
	await updateSortState(name, sort);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º state.filter.results
	await updateFilteredResults(model.state.currentData);

	//* —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	/* 	switch (sort) {
		case 'none':
		case 'down':
			model.state.filter.results.sort((a, b) => {
				return name === 'population'
					? +a[name] - +b[name]
					: a[name].localeCompare(b[name]);
			});
			break;

		case 'up':
			model.state.filter.results.sort((a, b) => {
				return name === 'population'
					? +b[name] - +a[name]
					: b[name].localeCompare(a[name]);
			});
			break;

		default:
			break;
	} */

	//* –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	CardsView.render(model.state.filter.results);

	console.log('controlSort-2 - model.state: ', model.state);
}

//todo —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
async function controlFilterPopulation(min, max) {
	console.log({ min, max });
	console.log('controlFilterPopulation-1 - model.state:', model.state);

	//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
	CardsView.renderSpinner();

	//* –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	model.state.filter.byPopulation.min = min;
	model.state.filter.byPopulation.max = max;

	//* 1 - –º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state.filter.results
	/* const data =
		model.state.filter.results.length > 0
			? model.state.filter.results.filter(
					(country) => country.population >= min && country.population <= max
			  )
			: model.state.currentData.filter(
					(country) => country.population >= min && country.population <= max
			  ); */

	//* –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	await updateFilteredResults(model.state.currentData);

	//* —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	// model.state.filter.results = data;

	/* model.state.filter.byPopulation.min = min;
	model.state.filter.byPopulation.max = max; */

	//* 2 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	CardsView.render(model.state.filter.results);

	console.log('controlFilterPopulation-2 - model.state:', model.state);
}

//todo –æ–±–Ω–æ–≤–ª—è–µ–º filtereResults
async function updateFilteredResults(countries) {
	console.log('update FilterResults - countries: ', countries);
	//* –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ 'none'
	// const res = await whereSortIsNotNone();
	const res = await whereSortIsNotNone();
	const [name, sort] = res;

	const data = countries
		.filter((country) => {
			return model.state.filter.region === 'all'
				? country
				: country.region === model.state.filter.region;
		})
		.filter((country) => {
			return (
				country.population >= model.state.filter.byPopulation.min &&
				country.population <= model.state.filter.byPopulation.max
			);
		});

	if (name && sort) {
		switch (sort) {
			case 'down':
				data.sort((a, b) => {
					return name === 'population'
						? +b[name] - +a[name]
						: b[name].localeCompare(a[name]);
				});
				break;

			case 'up':
				data.sort((a, b) => {
					return name === 'population'
						? +a[name] - +b[name]
						: a[name].localeCompare(b[name]);
				});
				break;

			default:
				break;
		}
	}
	console.log('data - new.model.state.filters: ', data);

	model.state.filter.results = data;
}

//todo –æ–±–Ω–æ–≤–ª—è–µ–º sortState
async function updateSortState(name, sort) {
	const newSort = {
		population: 'none', // string - 'up' / 'down' , default = none
		countryName: 'none', // string - 'up' / 'down' /  , default = none
		capitalName: 'none', // string - 'up' / 'down' , default = none
	};

	newSort[name] = sort;

	console.log('newSort: ', newSort);

	model.state.sort = newSort;
}

function whereSortIsNotNone() {
	//* –∫–ª–æ–Ω–∏—Ä—É–µ–º model.state.sort —á–µ—Ä–µ–∑ lodash cloneDeep
	const cloneStateSort = Object.assign({}, model.state.sort);
	console.log('cloneStateSort: ', cloneStateSort);

	let name = null;
	let sort = null;

	//* –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–ª–æ–Ω—É , –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–≤–Ω–æ none - —Ç–æ –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º name –∏ sort
	for (const [key, value] of Object.entries(cloneStateSort)) {
		if (value !== 'none') {
			name = key;
			sort = value;
			break;
		}
	}
	/* Object.entries(cloneStateSort).forEach(([key, value]) => {
		console.log('key:value', `${key}:${value}`);
		if (value !== 'none') {
			name = key;
			sort = value;
			// return;
		}
	}); */

	//* –ø—Ä–æ–≤–µ—Ä–∫–∞
	/* const obj = {
		population: 'none',
		countryName: 'none',
		capitalName: 'none',
	};

	Object.entries(obj).forEach(([key, value]) => {
		console.log('key:value', `${key}:${value}`);
		if (value !== 'none') {
			name = key;
			sort = value;
			// return;
		}
	}); */

	console.log('name: ', name);
	console.log('sort: ', sort);

	const result = [name, sort];

	//* –≤–æ–∑–≤—Ä–∞—â–∞–µ–º name –∏ sort
	return result;
}

//todo –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
function controlChooseCountry(id) {
	console.log('ChooseCountry - 1) - model.state: ', model.state);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º state.country
	updateStateCountry(id);

	//* –æ–±–Ω–æ–≤–ª—è–µ–º LS
	model.updateLS();

	//* –ø—Ä–æ–≤–µ—Ä—è–µ–º model.state
	console.log('ChooseCountry - 2) - model.state: ', model.state);
}

//* –æ–±–Ω–æ–≤–ª—è–µ–º state.country
async function updateStateCountry(id, data = null, dataBorders = null) {
	/* const newStateCountry = Object.assign({}, model.state.country);
	// const newStateCountry = _.cloneDeep({}, model.state.country);

	newStateCountry.id = id;
	console.log('newStateCountry: ', newStateCountry);

	//* –µ—Å–ª–∏ –µ—Å—Ç—å data —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º state CountryFull
	if (data) {
		newStateCountry.country.countryHTMLFullInfo = data;
	}

	if (dataBorders) {
		newStateCountry.country.borderCountries = dataBorders;
	}

	model.state.country = newStateCountry; */
	if (id) {
		model.state.country.id = id;
	}

	if (data) {
		model.state.country.countryHTMLFullInfo = data;
	}

	if (dataBorders) {
		model.state.country.borderCountries = dataBorders;
	}
}

//=====================================================
// –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è country html
async function controlCountryWrapper() {
	try {
		console.log('controlCountryWrapper - 1 - model.state: ', model.state);

		//* 0 - —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
		CountryView.renderSpinner();

		//* –º–µ–Ω—è–µ–º url
		/* history.pushState(
			null,
			null,
			`/country.html/id=${model.state.country.id.toLowerCase()}`
		); */

		//* 1 - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ
		/* const data = await model.getData(null, model.state.country.id); */
		const data = await model.getData(
			null,
			model.state.country.id.toLowerCase()
		);
		console.log('data: ', data);

		model.state.country.countryHTMLFullInfo = data;
		// await updateStateCountry(model.state.country.id, data);

		console.log(
			'model.state.country.countryHTMLFullInfo: ',
			model.state.country.countryHTMLFullInfo
		);

		let bordersNewData = [];

		//! —Ä–∞–±–æ—Ç–∞–µ—Ç

		//* 2 - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å–µ–¥—è—Ö
		const borders = await model.getDataBorders(
			model.state.country.countryHTMLFullInfo.borders
		);
		console.log('borders: ', borders);

		//* 3 –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ state
		model.state.country.borderCountries = borders;

		//* 4 —Ä–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		CountryView.render(
			model.state.country.countryHTMLFullInfo,
			model.state.country.borderCountries
		);

		console.log('controlCountryWrapper - 2 - model.state: ', model.state);
	} catch (error) {
		console.error(`${error}`);
		CountryView.renderMessage(
			`Could not load data of country with code (${model.state.country.id})üòû Try again later`
		);
	}
}

//todo –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
function controlBtnBack() {
	history.back();
}

//=====================================================
// –±–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

//* –Ω–∞—á–∞–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ index
async function initIndexHTML() {
	console.log('init index.html');
	filterToggle();
	switchModeSimple();
	scrollToTop();

	//* 0 - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
	CardsView.renderSpinner();

	//* 1 - –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
	await renderAllCountriesCards();
	// await renderCountriesCards();

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –ø–æ–∏—Å–∫—É
	// renderCountriesCards();
	SearchView.addHandlerSearch(controlSearchCountries);

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–µ–≥–∏–æ–Ω–∞
	FilterView.addHandlerFilterRegion(controlFilterRegion);

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
	FilterView.addHandlerSort(controlSort);

	//todo –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –º–µ–∂–¥—É –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
	FilterView.addHandlerFilterPopulation(controlFilterPopulation);

	//todo handle –∫–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—Ä–∞–Ω—ã
	CardsView.addHandlerChooseCountry(controlChooseCountry);
}

//* –Ω–∞—á–∞–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ country
async function initCountryHTML() {
	console.log('init country.html');
	switchModeSimple();
	scrollToTop();

	console.log('Country.html - model.state: ', model.state);

	//todo –æ–±–Ω–æ–≤–ª—è–µ–º url
	// history.pushState(null, null, `/country.html/?id=${model.state.country.id}`);

	//todo
	await controlCountryWrapper();
	console.log('init country.html - 2');

	//todo —Ä–µ–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
	CountryView.addHandlerBtnBack(controlBtnBack);

	//todo —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –¥—Ä—É–≥–∏–º —Å—Ç—Ä–∞–Ω–∞–º
	CountryView.addHandlerToBorderCountry(controlChooseCountry);
}

/* const getData = async (url) => {
	const response = await fetch(url);
	console.log('response: ', response);

	const data = await response.json();
	console.log('data: ', data);

	return data;
};

getData('https://restcountries.eu/rest/v2/all'); */
